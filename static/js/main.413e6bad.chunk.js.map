{"version":3,"sources":["Components/Alert.js","Components/Navbar.js","Components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","React","createElement","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capital","msg","Navbar","style","setColor","backgroundColor","color","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","value","borderRadius","onClick","changeBackground","TextForm","text","setText","useState","Fragment","heading","mode","onChange","event","target","rows","border","handleUpClick","newText","setAlertMessage","handleLowClick","handleClearClick","handleCopyClick","document","getElementById","select","navigator","clipboard","writeText","handleExtraSpaceClick","newtext","split","join","length","prototype","PropTypes","string","isRequired","defaultProps","App","setMode","setAlert","colors","setColorss","message","setTimeout","toggleMode","body","console","log","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.413e6bad.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nexport default function Alert(props) {\r\n    \r\n    const capital = (word) =>{\r\n        const lower = word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capital(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport PropTypes from 'prop-types'\r\n\r\nexport default function Navbar(props) {\r\n    return (\r\n        // <nav className=\"navbar navbar-expand-lg bg-body-tertiary\">\r\n        // <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n        <nav className=\"navbar navbar-expand-lg navbar-dark\" style={(() => {\r\n            if (props.setColor === 'Grey') {\r\n                return { backgroundColor: \"rgb(76, 76, 76)\", color: 'White' };\r\n            }\r\n            else if (props.setColor === 'White') {\r\n                return { backgroundColor: 'Grey', color: 'White'};\r\n            }\r\n            else if (props.setColor === '#042743') {\r\n                return { backgroundColor: '#192750' };\r\n            }\r\n            else if (props.setColor === '#ad442f') {\r\n                return { backgroundColor: '#722222' };\r\n            }\r\n            else if (props.setColor === 'rgb(116 147 111)') {\r\n                return { backgroundColor: 'rgb(32 96 21)' };\r\n            }\r\n        })()}>\r\n\r\n            <div className=\"container-fluid\">\r\n                <a className=\"navbar-brand\" href=\"/\">{props.title}</a>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link active\" aria-current=\"page\" href=\"/\">Home</a>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <a className=\"nav-link\" href=\"/\">{props.aboutText}</a>\r\n                        </li>\r\n                    </ul>\r\n                    {/* <form className=\"d-flex\" role=\"search\">\r\n                        <input className=\"form-control me-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" />\r\n                        <button className=\"btn btn-light\" type=\"submit\">Search</button>\r\n                    </form> */}\r\n                    {/* <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'}`}>\r\n                        <input className=\"form-check-input\" onClick={props.toggleMode} type=\"checkbox\" role=\"switch\" id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">Enable {props.mode === 'light' ? 'Dark' : 'Light'} Mode</label>\r\n                    </div> */}\r\n\r\n                    <div className='mx-3'>\r\n                        <input type=\"button\" value=\"   \"  style={{borderRadius: '50%', backgroundColor: 'Grey'}} onClick={()=>props.changeBackground('Grey')}/>\r\n                    </div>\r\n                    <div className='mx-3'>\r\n                        <input type=\"button\" value=\"   \" style={{borderRadius: '50%', backgroundColor: 'White'}} onClick={()=>props.changeBackground('White')}/>\r\n                    </div>\r\n                    <div className='mx-3'>\r\n                        <input type=\"button\" value=\"   \" style={{borderRadius: '50%', backgroundColor: '#042743'}} onClick={()=>props.changeBackground('#042743')}/>\r\n                    </div>\r\n                    <div className='mx-3'>\r\n                        <input type=\"button\" value=\"   \" style={{borderRadius: '50%', backgroundColor: '#ad442f'}} onClick={()=>props.changeBackground('#ad442f')}/>\r\n                    </div>\r\n                    <div className='mx-3'>\r\n                        <input type=\"button\" value=\"   \" style={{borderRadius: '50%', backgroundColor: '#35cf1d'}} onClick={()=>props.changeBackground('rgb(116 147 111)')}/>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.prototype = {\r\n    title: PropTypes.string.isRequired,\r\n    aboutText: PropTypes.string.isRequired\r\n}\r\n\r\nNavbar.defaultProps = {\r\n    title: 'Set title here',\r\n    aboutText: 'About'\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport default function TextForm(props) {\r\n    const handleUpClick = () => {\r\n        // console.log(\"Uppercase was clicked\" + text);\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        props.setAlertMessage(\"Text converted to Upper case!!\", \"success\");\r\n    }\r\n\r\n    const handleLowClick = () => {\r\n        // console.log(\"Uppercase was clicked\" + text);\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        props.setAlertMessage(\"Text converted to Lower case!!\", \"success\");\r\n    }\r\n\r\n    const handleClearClick = () => {\r\n        setText('');\r\n        props.setAlertMessage(\"Text Cleared!!\", \"success\");\r\n    }\r\n    const handleOnChange = (event) => {\r\n        // console.log(\"On Change\");\r\n        setText(event.target.value)\r\n    }\r\n\r\n    const handleCopyClick = () => {\r\n        let text = document.getElementById(\"myBox\");\r\n        text.select();\r\n        navigator.clipboard.writeText(text.value);\r\n        props.setAlertMessage(\"Text Copied!!\", \"success\");\r\n    }\r\n\r\n    const handleExtraSpaceClick = () => {\r\n        let newtext = text.split(/[ ]+/);\r\n        setText(newtext.join(\" \"));\r\n        props.setAlertMessage(\"Extra space removed from the text!!\", \"success\");\r\n    }\r\n    const [text, setText] = useState('');\r\n    return (\r\n        <>\r\n            <div className=\"container\" style={(() => {\r\n                if (props.setColor === 'Grey') {\r\n                    return { color: 'White' };\r\n                }\r\n                else if (props.setColor === '#042743') {\r\n                    return { color: 'White' };\r\n                }\r\n                else if (props.setColor === '#ad442f') {\r\n                    return { color: 'White' };\r\n                }\r\n                else if (props.setColor === 'rgb(116 147 111)') {\r\n                    return { color: 'White' };\r\n                }\r\n            })()}>\r\n\r\n\r\n                <h1>{props.heading}</h1>\r\n                <div className=\"mb-3\" style={{ backgroundColor: props.mode === 'dark' ? 'white' : 'black' }}>\r\n                    <textarea className=\"form-control\" onChange={handleOnChange} style={(() => {\r\n                        if (props.setColor === 'Grey') {\r\n                            return { backgroundColor: '#4c4c4c', color: 'White' };\r\n                        }\r\n                        else if (props.setColor === '#042743') {\r\n                            return { backgroundColor: '#192750', color: 'White' };\r\n                        }\r\n                        else if (props.setColor === '#ad442f') {\r\n                            return { backgroundColor: '#722222', color: 'White' };\r\n                        }\r\n                        else if (props.setColor === 'rgb(116 147 111)') {\r\n                            return { backgroundColor: 'rgb(32 96 21)', color: 'White' };\r\n                        }\r\n\r\n                    })()} value={text} id=\"myBox\" rows=\"8\"></textarea>\r\n                </div>\r\n\r\n                <button className=\"btn btn-primary mx-1\" style={(() => {\r\n                    if (props.setColor === 'Grey') {\r\n                        return { backgroundColor: 'rgb(76, 76, 76)', border: '2px solid black' };\r\n                    }\r\n                    else if (props.setColor === 'White') {\r\n                        return { backgroundColor: 'rgb(76, 76, 76)', border: '2px solid black'};\r\n                    }\r\n                    else if (props.setColor === '#042743') {\r\n                        return { backgroundColor: '#192750', color: 'White' };\r\n                    }\r\n                    else if (props.setColor === '#ad442f') {\r\n                        return { backgroundColor: '#722222', color: 'White' };\r\n                    }\r\n                    else if (props.setColor === 'rgb(116 147 111)') {\r\n                        return { backgroundColor: 'rgb(32 96 21)', color: 'White' };\r\n                    }\r\n                })()} onClick={handleUpClick}> Convert to UpperCase</button>\r\n                <button className=\"btn btn-primary mx-1\" style={(() => {\r\n                    if (props.setColor === 'Grey') {\r\n                        return { backgroundColor: 'rgb(76, 76, 76)', border: '2px solid black' };\r\n                    }\r\n                    else if (props.setColor === 'White') {\r\n                        return { backgroundColor: 'rgb(76, 76, 76)', border: '2px solid black'};\r\n                    }\r\n                    else if (props.setColor === '#042743') {\r\n                        return { backgroundColor: '#192750', color: 'White' };\r\n                    }\r\n                    else if (props.setColor === '#ad442f') {\r\n                        return { backgroundColor: '#722222', color: 'White' };\r\n                    }\r\n                    else if (props.setColor === 'rgb(116 147 111)') {\r\n                        return { backgroundColor: 'rgb(32 96 21)', color: 'White' };\r\n                    }\r\n                })()}  onClick={handleLowClick}> Convert to LowerCase</button>\r\n                <button className=\"btn btn-primary mx-1\" style={(() => {\r\n                    if (props.setColor === 'Grey') {\r\n                        return { backgroundColor: 'rgb(76, 76, 76)', border: '2px solid black' };\r\n                    }\r\n                    else if (props.setColor === 'White') {\r\n                        return { backgroundColor: 'rgb(76, 76, 76)', border: '2px solid black'};\r\n                    }\r\n                    else if (props.setColor === '#042743') {\r\n                        return { backgroundColor: '#192750', color: 'White' };\r\n                    }\r\n                    else if (props.setColor === '#ad442f') {\r\n                        return { backgroundColor: '#722222', color: 'White' };\r\n                    }\r\n                    else if (props.setColor === 'rgb(116 147 111)') {\r\n                        return { backgroundColor: 'rgb(32 96 21)', color: 'White' };\r\n                    }\r\n                })()} onClick={handleClearClick}> Clear Text</button>\r\n                <button className=\"btn btn-primary mx-1\" style={(() => {\r\n                    if (props.setColor === 'Grey') {\r\n                        return { backgroundColor: 'rgb(76, 76, 76)', border: '2px solid black' };\r\n                    }\r\n                    else if (props.setColor === 'White') {\r\n                        return { backgroundColor: 'rgb(76, 76, 76)', border: '2px solid black'};\r\n                    }\r\n                    else if (props.setColor === '#042743') {\r\n                        return { backgroundColor: '#192750', color: 'White' };\r\n                    }\r\n                    else if (props.setColor === '#ad442f') {\r\n                        return { backgroundColor: '#722222', color: 'White' };\r\n                    }\r\n                    else if (props.setColor === 'rgb(116 147 111)') {\r\n                        return { backgroundColor: 'rgb(32 96 21)', color: 'White' };\r\n                    }\r\n                })()}  onClick={handleCopyClick}> Copy Text</button>\r\n                <button className=\"btn btn-primary mx-1\" style={(() => {\r\n                    if (props.setColor === 'Grey') {\r\n                        return { backgroundColor: 'rgb(76, 76, 76)', border: '2px solid black' };\r\n                    }\r\n                    else if (props.setColor === 'White') {\r\n                        return { backgroundColor: 'rgb(76, 76, 76)', border: '2px solid black'};\r\n                    }\r\n                    else if (props.setColor === '#042743') {\r\n                        return { backgroundColor: '#192750', color: 'White' };\r\n                    }\r\n                    else if (props.setColor === '#ad442f') {\r\n                        return { backgroundColor: '#722222', color: 'White' };\r\n                    }\r\n                    else if (props.setColor === 'rgb(116 147 111)') {\r\n                        return { backgroundColor: 'rgb(32 96 21)', color: 'White' };\r\n                    }\r\n                })()}  onClick={handleExtraSpaceClick}> Remove Extra Space</button>\r\n\r\n            </div>\r\n            <div className=\"container my-3\" style={(() => {\r\n                if (props.setColor === 'Grey') {\r\n                    return { color: 'White' };\r\n                }\r\n                else if (props.setColor === '#042743') {\r\n                    return { color: 'White' };\r\n                }\r\n                else if (props.setColor === '#ad442f') {\r\n                    return { color: 'White' };\r\n                }\r\n                else if (props.setColor === 'rgb(116 147 111)') {\r\n                    return { color: 'White' };\r\n                }\r\n            })()}>\r\n                <h1>Your Text Summary</h1>\r\n                <p>{text.split(\" \").length - 1} words and {text.length} characters</p>\r\n                <p>{0.008 * (text.split(\" \").length - 1)} Minutes read </p>\r\n                <h2>Preview</h2>\r\n                <p>{text.length === 0 ? \"Enter something to preview it!\" : text}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\n\r\n\r\n","import './App.css';\nimport Alert from './Components/Alert';\n// import About from './Components/About';\nimport Navbar from './Components/Navbar';\nimport TextForm from './Components/TextForm';\nimport React, { useState } from 'react';\n\n// import {\n//   BrowserRouter as Router,\n//   Routes,\n//   Route\n// } from 'react-router-dom';\n\n\nfunction App() {\n  const [mode, setMode] = useState('light');\n  const [alert, setAlert] = useState(null);\n  const [colors, setColorss] = useState('White');\n\n  const changeBackground = (word) => {\n    setColorss(word);\n    console.log(\"color: \" + word);\n    document.body.style.backgroundColor = word;\n  }\n\n  const setAlertMessage = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type\n    })\n    setTimeout(() => {\n      setAlert(null)\n    }, 2000);\n  }\n  const toggleMode = () => {\n    if (mode === 'dark') {\n      setMode('light');\n      document.body.style.backgroundColor = 'white';\n      setAlertMessage(\"Light Mode has been enabled\", \"success\");\n    }\n    else {\n      document.body.style.backgroundColor = '#042743';\n      setMode('dark');\n      setAlertMessage(\"Dark Mode has been enabled\", \"success\");\n    }\n  }\n  return (\n    <>\n      {/* <Router> */}\n\n        <Navbar title=\"TextUtils\" aboutText=\"About\" mode={mode} toggleMode={toggleMode} changeBackground={changeBackground} setColor={colors} />\n        <Alert alert={alert} />\n        <div className='container my-3'>\n          {/* <Routes> */}\n          {/* <Route path=\"/\" element={} /> */}\n          {/* <Route path=\"/about\" element={<About />} />\n      </Routes> */}\n          <TextForm heading=\"Enter the text to analyse\" mode={mode} setAlertMessage={setAlertMessage} setColor={colors} />\n\n        </div >\n        {/* <div className='container my-3'>\n      <About/>\n    </div> */}\n      {/* </Router> */}\n    </>\n  );\n\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}